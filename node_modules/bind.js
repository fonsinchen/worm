"use strict";

var transformation = require('transformation');

exports = function(descriptor, structure, tableDesc) {
    var schemaName = null, tableName = null, schema = null, table = null;
    var children = {}, columns = {}, tables = {};

    var resolveSchema  = function() {
        if (typeof table === 'string') tableDesc = tableDesc.split('.');
        tableName = tableDesc[tableDesc.length - 1];
        if (tableDesc.length === 2) {
            schemaName = tableDesc[0];
            schema = structure[schemaName];
        } else if (structure[0] !== undefined) {
            switch (typeof structure[0]) {
                case 'string': 
                    schemaName = structure[0];
                    schema = structure[schemaName];
                    break;
                case 'object':
                    schema = structure[0];
                    break;
            }
        } else {
            schema = structure;
        }
        table = schema[tableName];
    };

    var resolveChildren = function() {
        descriptor.forEach(function(key, child) {
            switch(typeof child) {
                case 'string':
                    children[key] = transformation.expr(child).bind(structure, tableDesc, key);
                    break;
                case 'number':
                    children[key] = transformation.verbatim(child).bind(structure, tableDesc, key);
                    break;
                case 'object':
                    if (typeof child.retrieve === 'function' || typeof child.insert === 'function') {
                        children[key] = child.bind(structure, tableDesc, key);
                    } else if (table.fkeys !== undefined && table.fkeys[key] !== undefined) {
                        children[key] = transformation.one(child).bind(structure, tableDesc, key);
                    } else if (table.lkeys !== undefined && table.lkeys[key] !== undefined) {
                        children[key] = transformation.many(child).bind(structure, tableDesc, key);
                    } // else ignore or error?
                    break;
            }
        });
    };

    var resolveTables = function() {
        tables[tableName] = tableDesc;
        children.forEach(function(key, child) {
            if (child.tables !== undefined) child.tables(tables, tableName);
        });
    };

    var resolveColumns = function() {
        table.columns.forEach(function(name, column) {
            if (column.pkey) columns[name] = tableDesc.concat(name);
        });
        children.forEach(function(key, child) {
            if (child.columns !== undefined) child.columns(columns);
        });
    };

    resolveSchema();
    resolveChildren();
    resolveTables();
    resolveColumns();
    
    return {
        columns : function() {
            return columns;
        },
        tables : function() {
            return tables;
        }
    };
}