
exports = function(driver, bound, where, limit, offset) {
    // TODO: do the rendering on the first call to select/insert/update/delete
    // to not uselessly render statements we'll never use.
    var qui = driver.quoteUnqualifiedIdentifier;
    var tables = bound.joinTables();
    var tableSql = [];
    tables.forEach(function(alias, table) {
        var name = qui(table.table);
        alias = qui(alias);

        var singleTableSql = (table.schema !== undefined ?
                qui(table.schema) + '.' + name : name);
        if (alias !== name) singleTableSql += ' AS ' + alias;
        if (table.condition !== undefined) {
            singleTableSql += ' ON ' + driver.renderExpression(table.condition);
            tableSql.push(singleTableSql);
        } else {
            tableSql.unshift(singleTableSql);
        }
    });
    // tableSql.join(' JOIN ')
    var columns = bound.aliasedColumns();
    var columnSql = [];
    columns.forEach(function(alias, column) {
        columnSql.push(qui(column.table) + '.' + qui(column.column) + ' AS ' + qui(alias));
    });
    var selectDelete = ' FROM ' + tableSql.join(' JOIN ');
    if (where !== undefined) selectDelete += ' WHERE ' + driver.renderExpression(where);
    if (limit !== undefined) selectDelete += ' LIMIT ' + limit;
    if (offset !== undefined) selectDelete += ' OFFSET ' + offset;

    var selectSql = 'SELECT ' + columnSql.join(',') + selectDelete;
    var rawTables = bound.rawTables();
    var deleteSql = 'DELETE ' + rawTables.map(qui).join(',') + selectDelete;
    return {
        "update" : function(objs, callback) {},
        "insert" : function(objs, callback) {},
        "delete" : function(params, callback) {
            // this deletes from all tables
            driver.run(deleteSql, params, callback);
        },
        "select" : function(params, callback) {
            driver.run(selectSql, params, function(row) {
                bound.extract(row, callback);
            });
        }
    }
}