
exports = function(driver, bound, where, limit, offset) {
    var qui = driver.quoteUnqualifiedIdentifier;
    
    var getSelectDelete = function() {
        if (getSelectDelete.sql !== undefined) return getSelectDelete.sql;
        var tableSql = [];
        bound.aliasedTables().forEach(function(alias, table) {
            var name = qui(table.table);
            alias = qui(alias);

            var singleTableSql = (table.schema !== undefined ?
                    qui(table.schema) + '.' + name : name);
            if (alias !== name) singleTableSql += ' AS ' + alias;
            if (table.condition !== undefined) {
                singleTableSql += ' ON ' + driver.renderExpression(table.condition);
                tableSql.push(singleTableSql);
            } else {
                tableSql.unshift(singleTableSql);
            }
        });
        var selectDelete = ' FROM ' + tableSql.join(' JOIN ');
        if (where !== undefined) selectDelete += ' WHERE ' + driver.renderExpression(where);
        if (limit !== undefined) selectDelete += ' LIMIT ' + limit;
        if (offset !== undefined) selectDelete += ' OFFSET ' + offset;
        return getSelectDelete.sql = selectDelete;
    };
    
    var getSelect = function() {
        if (getSelect.sql !== null) return getSelect.sql;
        var columnSql = [];
        bound.aliasedColumns().forEach(function(alias, column) {
            columnSql.push(qui(column.table) + '.' + qui(column.column) + ' AS ' + qui(alias));
        });
        return getSelect.sql = 'SELECT ' + columnSql.join(',') + getSelectDelete();
    };
    
    var getDelete = function() {
        if (getDelete.sql !== null) return getDelete.sql;
        return getDelete.sql = 'DELETE ' + bound.aliasedTables().keys().map(qui).join(',') + getSelectDelete();
    }
    
    return {
        "update" : function(objs, callback) {},
        "insert" : function(objs, callback) {},
        "delete" : function(params, callback) {
            // this deletes from all tables
            driver.run(getDelete(), params, callback);
        },
        "select" : function(params, callback) {
            driver.run(getSelect(), params, function(row) {
                bound.extract(row, callback);
            });
        }
    }
}